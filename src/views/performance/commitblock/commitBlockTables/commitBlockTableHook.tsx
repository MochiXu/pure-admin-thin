import { delay } from "@pureadmin/utils";
import { getPerformanceSearchedCommitBlocks } from "@/api/performance/commitblocks/searchedCommitBlocks";
import { getPerformanceCandidatesCommitBlocks } from "@/api/performance/commitblocks/candidatesCommitBlocks";
import { ref, onMounted, watch, nextTick, computed, Ref } from "vue";
import {
  searched_table_columns,
  selected_table_columns,
  loading,
  pagination,
  loadingConfig,
  buttonClass
} from "./tableConfigs";
import { storageSession } from "@pureadmin/utils";
import {
  CommitBlockStoreConfigs,
  CommitBlockStoreConfigName,
  CommitBlockStoreDefaultData,
  TopBtnStoreDefaultData
} from "@/views/performance/commitblock/common/commitBlockTypes";
import { useCommitBlockStatusStoreHook } from "@/store/modules/performance/commitBlockStatus";
import {
  TopBtnStoreConfigName,
  TopBtnStoreConfigs
} from "../topbtn/topBtnTypes";

export function useCommitBlockTable() {
  /** table raw data */
  const searched_table_data = ref([]);
  const candidates_table_data = ref([]);

  /** table data ids */
  const current_selected_cb_ids = ref(
    useCommitBlockStatusStoreHook().current_selected_cb_ids
  );
  const current_candidates_cb_ids = ref(
    useCommitBlockStatusStoreHook().candidates_cb_ids
  );

  /** table ÂºïÁî®ÂØπË±° */
  const searchedTableRef = ref();
  const selectedTableRef = ref();

  /** searched_table_data ËÆ°ÁÆóÂ±ûÊÄß */
  const searched_table_computed_data = computed((): Ref<any[]> => {
    // candicates ids ÂèëÁîüÂèòÂåñÊó∂‰øÆÊîπ searched_table_data, Èò≤Ê≠¢Âú® searched table ‰∏≠Âá∫Áé∞Â∑≤ÁªèÊàê‰∏∫ candidates ÁöÑ rows
    const searched_table_remove_candidates_data = ref([]);
    searched_table_data.value.forEach(row => {
      if (!current_candidates_cb_ids.value.includes(row.task_id)) {
        searched_table_remove_candidates_data.value.push(row);
      }
    });
    pagination.total = searched_table_remove_candidates_data.value.length;
    return searched_table_remove_candidates_data;
  });

  /** Ê†πÊçÆ session Â≠òÂÇ®ÁöÑ candidates id Âà∑Êñ∞ candidates table */
  async function reloadCandidatesTable() {
    // Ê∏ÖÁ©∫ÂΩìÂâç candidate table data
    candidates_table_data.value = [];
    // Êó†Ê≥ï‰ªéÂΩìÂâç table Áõ¥Êé•Ëé∑ÂèñÁöÑ row, ÈúÄË¶Å‰ªéÂêéÁ´ØÂä†ËΩΩ
    const loading_ids_from_backend = [];
    // ‰ªé searched_table_data Áõ¥Êé•Âä†ËΩΩÊï∞ÊçÆÂà∞ candidates_table_data
    current_candidates_cb_ids.value.forEach(candidate_id => {
      if (searched_table_data.value.find(row => row.task_id === candidate_id)) {
        candidates_table_data.value.push(
          // ÂΩì task_id ÂîØ‰∏ÄÊó∂, Ê≠§Â§ÑËøîÂõûÁöÑÊòØ‰ªÖÂåÖÂê´ 1 ‰∏™ item ÁöÑ list
          ...searched_table_data.value.filter(
            row => row.task_id === candidate_id
          )
        );
      } else {
        loading_ids_from_backend.push(candidate_id);
      }
    });
    // ‰ªéÂêéÁ´ØÂä†ËΩΩÊú™ÂÆåÊàêÁöÑ rows
    if (loading_ids_from_backend.length != 0) {
      const { data } = await getPerformanceCandidatesCommitBlocks({
        ids: loading_ids_from_backend
      });
      // Êõ¥Êñ∞ÂêéÁ´ØËøîÂõûÁªìÊûú data list
      candidates_table_data.value.push(...data.list);
    }
    // ÂØπÊï∞ÊçÆËøõË°åÊéíÂ∫è
    candidates_table_data.value.sort(
      (left, right) => right.task_id - left.task_id
    );
  }

  /** ÁõëÂê¨ current candidates ids */
  watch(current_candidates_cb_ids.value, async newValue => {
    const commit_block_in_session =
      storageSession().getItem<CommitBlockStoreConfigs>(
        CommitBlockStoreConfigName
      ) ?? CommitBlockStoreDefaultData;
    commit_block_in_session.candidates_cb_ids = newValue;
    storageSession().setItem(
      CommitBlockStoreConfigName,
      commit_block_in_session
    );
    await reloadCandidatesTable();
    // console.log("watch => current_candidates_cb_ids", newValue);
  });

  /** ÁõëÂê¨ current selected ids */
  watch(current_selected_cb_ids.value, newValue => {
    const commit_block_in_session =
      storageSession().getItem<CommitBlockStoreConfigs>(
        CommitBlockStoreConfigName
      ) ?? CommitBlockStoreDefaultData;
    commit_block_in_session.current_selected_cb_ids = newValue;
    storageSession().setItem(
      CommitBlockStoreConfigName,
      commit_block_in_session
    );
    // console.log("watch => current_selected_cb_ids", newValue);
  });

  /******** Searched Table ÂõûË∞ÉÂáΩÊï∞ ************/

  /** Âú® search table ‰∏ä, ÈáçÊñ∞ÂãæÈÄâÈúÄË¶ÅÈÄâ‰∏≠ÁöÑ rows */
  function reToggleSearchedTable() {
    // ÈÅçÂéÜ Table ÊâÄÊúâË°åÔºåËã•Â≠òÂú®Â±û‰∫é current_selected_cb_ids ÁöÑË°åÔºåÂàôÂ∞ÜÂÖ∂ÁΩÆ‰∫éÂãæÈÄâÁä∂ÊÄÅ
    const { toggleRowSelection } = searchedTableRef.value.getTableRef();
    searched_table_data.value.forEach(row => {
      if (current_selected_cb_ids.value.includes(row.task_id)) {
        toggleRowSelection(row, true);
      }
    });
  }
  /** ‰øÆÊîπÂàÜÈ°µÂ§ßÂ∞è */
  function handleSizeChange(val: number) {
    console.log(`searched Table: ${val} items per page`);
    nextTick(() => {
      reToggleSearchedTable();
    });
  }

  /** Â§ÑÁêÜÂàÜÈ°µË∑≥ËΩ¨ */
  function handleCurrentChange(val: number) {
    loadingConfig.text = `Loading Page ${val} üêî üèÄ ...`;
    loading.value = true;
    delay(20).then(() => {
      loading.value = false;
      nextTick(() => {
        reToggleSearchedTable();
      });
    });
  }

  /** Ëß¶Âèë search table ÂÖ®ÈÄâÁä∂ÊÄÅ */
  function handleSelectAll(selection) {
    // selection Ë°®Á§∫ÁõÆÂâçÊï¥Âº† table ÂÜÖÊâÄÊúâÈÄâ‰∏≠ÁöÑË°å
    // Ëé∑ÂèñÂΩìÂâçÈ°µÊâÄÊúâË°å
    const current_page_data = searched_table_computed_data.value.value.slice(
      (pagination.currentPage - 1) * pagination.pageSize,
      pagination.currentPage * pagination.pageSize
    );
    if (selection.includes(current_page_data[0])) {
      // Â§ÑÁêÜÂÖ®ÈÉ®Âä†ÂÖ•ÂãæÈÄâ
      selection.forEach(element => {
        if (!current_selected_cb_ids.value.includes(element.task_id)) {
          current_selected_cb_ids.value.push(element.task_id);
        }
      });
    } else {
      // Â§ÑÁêÜÂÖ®ÈÉ®ÁßªÈô§ÂãæÈÄâ
      current_page_data.forEach(element => {
        if (current_selected_cb_ids.value.includes(element.task_id)) {
          const index = current_selected_cb_ids.value.indexOf(element.task_id);
          if (index > -1) {
            current_selected_cb_ids.value.splice(index, 1);
          }
        }
      });
    }
  }

  /** Ëß¶Âèë search table ÂçïÈÄâÁä∂ÊÄÅ */
  function handleSelectOne(selection, row) {
    if (selection.includes(row)) {
      // Â§ÑÁêÜÂä†ÂÖ•ÂãæÈÄâ
      if (!current_selected_cb_ids.value.includes(row.task_id)) {
        current_selected_cb_ids.value.push(row.task_id);
      }
    } else {
      // Â§ÑÁêÜÁßªÈô§ÂãæÈÄâ
      if (current_selected_cb_ids.value.includes(row.task_id)) {
        const index = current_selected_cb_ids.value.indexOf(row.task_id);
        if (index > -1) {
          current_selected_cb_ids.value.splice(index, 1);
        }
      }
    }
  }

  /** Âä†ËΩΩ search table Ë°®Ê†ºÊï∞ÊçÆ */
  async function onSearch() {
    loading.value = true;
    // Â∞ÅË£ÖËØ∑Ê±ÇÊ∂àÊÅØ‰Ωì
    const top_btn_store_data =
      storageSession().getItem<TopBtnStoreConfigs>(TopBtnStoreConfigName) ??
      TopBtnStoreDefaultData;
    const request_params = {
      release_date_range: top_btn_store_data.release_date_range,
      run_date_range: top_btn_store_data.run_date_range,
      selected_dataset_group: top_btn_store_data.selected_dataset_group,
      selected_engines: top_btn_store_data.selected_engines,
      selected_platform: top_btn_store_data.selected_platform
    };

    // ÂºÇÊ≠•ËØ∑Ê±ÇÂêéÁ´ØËøîÂõû searched commit blocks Êï∞ÊçÆ
    const { data } = await getPerformanceSearchedCommitBlocks(request_params);
    // Êõ¥Êñ∞ÂêéÁ´ØËøîÂõûÁªìÊûú data list
    searched_table_data.value = data.list;
    // ÂØπ searched table ËøõË°åÊéíÂ∫è
    searched_table_data.value.sort(
      (left, right) => right.task_id - left.task_id
    );
    // Ëé∑ÂæóÂàóË°®ÊÄªÈïøÂ∫¶
    pagination.total = data.total;
    // Ê∏ÖÁ©∫Â∑≤ÂãæÈÄâ
    current_selected_cb_ids.value.splice(
      0,
      current_selected_cb_ids.value.length
    );
    setTimeout(() => {
      loading.value = false;
    }, 200);
  }

  /** Âà∑Êñ∞ search table Ë°®Ê†ºÊï∞ÊçÆ */
  async function onRefresh() {
    // ‰ªéÂêéÁ´ØÈáçÊñ∞Ëé∑Âèñ search table Êï∞ÊçÆ
    await onSearch();
    // Âà∑Êñ∞ candidates table Êï∞ÊçÆ
    await reloadCandidatesTable();
  }

  /******** Candidates Table ÂõûË∞ÉÂáΩÊï∞ ************/

  /** Ê∑ªÂä†Ëá≥ÂÄôÈÄâÂàóË°® */
  function addToCandidate() {
    // Â∞ÜÂΩìÂâç searched table Â§Ñ‰∫éÂãæÈÄâÁä∂ÊÄÅÁöÑ rows Ê∑ªÂä†Âà∞ÂÄôÈÄâÂàóË°®
    current_candidates_cb_ids.value.push(...current_selected_cb_ids.value);
    pagination.total -= current_selected_cb_ids.value.length;
    // ÂèñÊ∂àÊâÄÊúâÂãæÈÄâÁöÑÁä∂ÊÄÅ
    current_selected_cb_ids.value.splice(
      0,
      current_selected_cb_ids.value.length
    );
    nextTick(() => {
      const { clearSelection } = searchedTableRef.value.getTableRef();
      clearSelection();
    });
  }

  /** ÁßªÈô§ÂÄôÈÄâÂàóË°®ÂÜÖÈÄâ‰∏≠ÁöÑ rows */
  function removeSelected() {
    const { getSelectionRows, clearSelection } =
      selectedTableRef.value.getTableRef();
    const need_delete_ids = [];
    getSelectionRows().forEach(row => {
      need_delete_ids.push(row.task_id);
    });
    clearSelection();
    const remain_ids = current_candidates_cb_ids.value.filter(
      id => !need_delete_ids.includes(id)
    );
    current_candidates_cb_ids.value.splice(
      0,
      current_candidates_cb_ids.value.length
    );
    current_candidates_cb_ids.value.push(...remain_ids);
  }

  function removeAll() {
    current_candidates_cb_ids.value.splice(
      0,
      current_candidates_cb_ids.value.length
    );
    // console.log("removeAll");
  }

  // ÈáçÁΩÆ TopBtn ÊêúÁ¥¢Èù¢Êùø
  const resetForm = formEl => {
    if (!formEl) return;
    formEl.resetFields();
    onSearch();
  };

  onMounted(() => {
    loading.value = true;
    // Á≠âÂæÖÈ°µÈù¢Ê∏≤ÊüìÂÆåÊàê, ËøõË°åÈ¢ÑÂ§ÑÁêÜ
    delay(400).then(() => {
      nextTick(async () => {
        await onSearch();
        await reloadCandidatesTable();
        // ÈÅçÂéÜ Table ÊâÄÊúâË°åÔºåËã•Â≠òÂú®Â±û‰∫é current_selected_commit_blocks ÁöÑË°åÔºåÂàôÂ∞ÜÂÖ∂ÁΩÆ‰∫éÂãæÈÄâÁä∂ÊÄÅ
        const { toggleRowSelection } = searchedTableRef.value.getTableRef();
        searched_table_data.value.forEach(row => {
          if (current_selected_cb_ids.value.includes(row.task_id)) {
            toggleRowSelection(row, true);
          }
        });
        loading.value = false;
      });
    });
  });

  return {
    // table ÂºïÁî®ÂØπË±°
    searchedTableRef,
    selectedTableRef,
    // table Âàó
    searched_table_columns,
    selected_table_columns,
    // table Êï∞ÊçÆ
    candidates_table_data,
    searched_table_computed_data,
    // ÂàÜÈ°µÈÖçÁΩÆ
    loading,
    pagination,
    loadingConfig,
    buttonClass,
    // ÂõûË∞ÉÂáΩÊï∞
    removeSelected,
    removeAll,
    onSearch,
    onRefresh,
    resetForm,
    addToCandidate,
    handleSizeChange,
    handleCurrentChange,
    handleSelectOne,
    handleSelectAll
  };
}
